import flixel.ui.FlxBar;

var ratingFC:String = "";
var ratingName:String = "?";

var ratingStuff:Array<Dynamic> = [
    ['F', 0.2], // From 0% to 19%
    ['E', 0.4], // From 20% to 39%
    ['D', 0.5], // From 40% to 49%
    ['C', 0.6], // From 50% to 59%
    ['B', 0.69], // From 60% to 68%
    ['A', 0.7], // 69%
    ['A+', 0.8], // From 70% to 79%
    ['S', 0.9], // From 80% to 89%
    ['S+', 1], // From 90% to 99%
    ['SS+', 1] // The value on this one isn't used actually, since Perfect is always "1"
];
var botplaySine:Float = 0;

var healthBarBG:FlxSprite;
var healthBar:FlxBar;

var timeText:FlxText;
var timeBar:FlxBar;
var timeBarBG:FlxSprite;

var scoreText:FlxText;
var botplayText:FlxText;

function generateHealthBar() {
    final barY:Float = (Options.downscroll) ? 72 : FlxG.height * 0.89;

    healthBarBG = new FlxSprite(0, barY);
    healthBarBG.loadGraphic(getHUDImage("mm_healthbar"));
    healthBarBG.screenCenter(FlxAxes.X);
    healthBarBG.zIndex = 1;
    add(healthBarBG);

    healthBar = new FlxBar(
        healthBarBG.x + 4, healthBarBG.y + 5,
        FlxBarFillDirection.RIGHT_TO_LEFT, Std.int(healthBarBG.width * 0.85), Std.int(healthBarBG.height - 14),
        null, null, playField.stats.minHealth, playField.stats.maxHealth
    );
    healthBar.createFilledBar(
        (game.opponent?.healthColor != null) ? game.opponent.healthColor : 0xFFFF0000,
        (game.player?.healthColor != null) ? game.player.healthColor : 0xFF66FF33
    );
    healthBar.value = playField.stats.health;
    healthBar.numDivisions = Std.int(healthBar.width * 4);
    healthBar.screenCenter(FlxAxes.X);
    add(healthBar);

    var opponentIcon = "face";
    if(game != null)
        opponentIcon = game.currentChart.meta.game.getCharacter("opponent");
    
    var playerIcon = "face";
    if(game != null)
        playerIcon = game.currentChart.meta.game.getCharacter("player");
    
    iconP2 = new HealthIcon(opponentIcon, 0);
    iconP2.zIndex = 1;
    add(iconP2);
    
    iconP1 = new HealthIcon(playerIcon, 1);
    iconP1.flipX = true;
    iconP1.zIndex = 1;
    add(iconP1);

    final gbcolor = 0xFFF42626;
    scoreText = new FlxText(healthBarBG.x + (healthBarBG.width - 190), healthBarBG.y + 43, 0, "");
    scoreText.setFormat(Paths.font("fonts/mario2"), 15, gbcolor, FlxTextAlign.LEFT, FlxTextBorderStyle.OUTLINE, FlxColor.BLACK);
    scoreText.borderSize = 1.25;
    scoreText.zIndex = 2;
    add(scoreText);

    botplayText = new FlxText(400, playField.playerStrumLine.y, 0, "BOTPLAY", 32);
    botplayText.setFormat(Paths.font("fonts/mariones"), 24, gbcolor, FlxTextAlign.CENTER, FlxTextBorderStyle.OUTLINE, FlxColor.BLACK);
    botplayText.screenCenter(FlxAxes.X);
    botplayText.borderSize = 1.25;
    botplayText.y += (playField.playerStrumLine.strums.height - botplayText.height) * 0.5;
    add(botplayText);

    var timeY:Float = 20;
    if(Options.downscroll)
        timeY = FlxG.height - 42;
    
    var timeX:Float = 45 + (FlxG.width / 2) - 245;
    timeBarBG = new FlxSprite(timeX, timeY + 4).loadGraphic(getHUDImage("mm_timebar"));
    timeBarBG.alpha = 0;
    timeBarBG.color = FlxColor.BLACK;
    add(timeBarBG);

    timeBar = new FlxBar(
        timeBarBG.x + 4, timeBarBG.y + 4,
        FlxBarFillDirection.LEFT_TO_RIGHT, Std.int(timeBarBG.width - 8), Std.int(timeBarBG.height - 8),
        game, "songPercent", 0, 1
    );
    timeBar.createFilledBar(0xFF000000, gbcolor);
    timeBar.numDivisions = 0; // btw shadowmario from psych 0.5.2h era this won't cause any lag it's just basic math
    timeBar.alpha = 0;
    add(timeBar);

    timeText = new FlxText(timeX, timeY - 4, 400, "0:00", 32);
    timeText.setFormat(Paths.font("fonts/mario2"), 22, gbcolor, FlxTextAlign.CENTER, FlxTextBorderStyle.OUTLINE, FlxColor.BLACK);
    timeText.alpha = 0;
    timeText.borderSize = 2;
    add(timeText);

    // final ref = new FlxSprite().loadGraphic(getHUDImage("ref cuz im autistic as fuck and want this to be as accurate as possible"));
    // ref.alpha = 0.3;
    // ref.screenCenter();
    // add(ref);
}

function onCreatePost() {
    game.playField.comboDisplay.legacyStyle = true;
}

function onSongStart() {
    FlxTween.tween(timeBar, {alpha: 1}, 0.5, {ease: FlxEase.circOut});
    FlxTween.tween(timeBarBG, {alpha: 1}, 0.5, {ease: FlxEase.circOut});
	FlxTween.tween(timeText, {alpha: 1}, 0.5, {ease: FlxEase.circOut});
}

function updateHealthBar() {
    final percent:Float = playField.stats.displayedHealth / playField.stats.maxHealth;
    iconP2.health = 1 - percent;
    iconP1.health = percent;
    positionIcons();
}

function updatePlayerStats(stats) {
    ratingFC = "";
    if(stats.judgements.get("killer") > 0)
        ratingFC = "KFC";

    if(stats.judgements.get("sick") > 0)
        ratingFC = "SFC";

    if(stats.judgements.get("good") > 0)
        ratingFC = "GFC";

    if(stats.judgements.get("bad") > 0 || stats.judgements.get("shit") > 0)
        ratingFC = "FC";

    if(stats.misses > 0 && stats.misses < 10)
        ratingFC = "SDCB";

    else if(stats.misses >= 10)
        ratingFC = "Clear";

    ratingName = "?";
    if(stats.accuracy >= 1)
        ratingName = ratingStuff[ratingStuff.length - 1][0];
    else {
        var shite = ratingStuff.length - 1;
        for(i in 0...shite) {
            if(stats.accuracy < ratingStuff[i][1]) {
                ratingName = ratingStuff[i][0];
                break;
            }
        }
    }
    var ratingStr:String = "N/A";
    if(stats.accuracy != 0)
        ratingStr = ratingName + " (" + Math.floor(stats.accuracy * 100) + "%)";

    scoreText.text = (
        "Score: " + stats.score +
        "      Misses: " + stats.misses +
        "      Rating: " + ratingStr
    );
    scoreText.screenCenter(FlxAxes.X);
}

function positionIcons() {
    final percent:Float = playField.stats.displayedHealth / playField.stats.maxHealth;
    iconP1.x = healthBar.x + (healthBar.width * (1 - percent)) - 26;
    iconP1.y = healthBar.y + (healthBar.height * 0.5) - (iconP1.height * 0.5);

    iconP2.x = healthBar.x + (healthBar.width * (1 - percent)) - (iconP2.width - 26);
    iconP2.y = healthBar.y + (healthBar.height * 0.5) - (iconP2.height * 0.5);
}

function onUpdate(elapsed:Float) {
    if(!game.startingSong)
        timeText.text = FlxStringUtil.formatTime(game.inst.time * 0.001);

    botplayText.visible = playField.playerStrumLine.botplay;
    if(botplayText.visible) {
        botplaySine += 180 * elapsed;
		botplayText.alpha = 1 - Math.sin((Math.PI * botplaySine) / 180);
    }
    healthBar.setRange(playField.stats.minHealth, playField.stats.maxHealth);
    healthBar.value = playField.stats.displayedHealth;
    positionIcons();
}

function onUpdatePost(elapsed:Float) {
    // final iconSpeed:Float = Math.exp(-elapsed * 9);
    // iconP2.scale.set(
    //     FlxMath.lerp((150 * iconP2.size.x) / iconP2.frameWidth, iconP2.scale.x, iconSpeed),
    //     FlxMath.lerp((150 * iconP2.size.y) / iconP2.frameHeight, iconP2.scale.y, iconSpeed)
    // );
    // iconP1.scale.set(
    //     FlxMath.lerp((150 * iconP1.size.x) / iconP1.frameWidth, iconP1.scale.x, iconSpeed),
    //     FlxMath.lerp((150 * iconP1.size.y) / iconP1.frameHeight, iconP1.scale.y, iconSpeed)
    // );
    // iconP2.updateHitbox();
    // iconP1.updateHitbox();
    
    // iconP2.offset.x = 0;
    // iconP1.offset.x = 0;

    positionIcons();
}

function bopIcons() {
    for(i in [iconP2, iconP1]) {
        if(i.width > i.height)
            i.setGraphicSize(HealthIcon.HEALTH_ICON_SIZE * i.size.x * 1.1, 0);
        else
            i.setGraphicSize(0, HealthIcon.HEALTH_ICON_SIZE * i.size.y * 1.1);

        if(i.bopTween != null)
            i.bopTween.cancel();

        i.bopTween = FlxTween.tween(i.scale, {x: (HealthIcon.HEALTH_ICON_SIZE * i.size.x) / i.frameWidth, y: (HealthIcon.HEALTH_ICON_SIZE * i.size.y) / i.frameHeight}, 0.5 * (1 / (Conductor.instance.bpm / 60)), {
            ease: FlxEase.cubeOut,
            onUpdate: (_) -> {
                i.updateHitbox();
                i.offset.x = 0;

                if(i == iconP1)
                    positionIcons();
            }
        });
        i.updateHitbox();
        i.offset.x = 0;
    }
    positionIcons();
}

function onBeatHit(beat:Int) {
    if(beat < 0)
        return;
    
    bopIcons();
}

function onNoteHit(e) {
    if(e.note.strumLine != playField.playerStrumLine)
        return;

    FlxTween.cancelTweensOf(scoreText.scale);
    scoreText.scale.set(1.075, 1.075);
    FlxTween.tween(scoreText.scale, {x: 1, y: 1}, 0.2);
}